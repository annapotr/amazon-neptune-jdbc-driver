SQL-Gremlin
===========
:toc:
:toc-title:

The SQL-Gremlin compiler turns your SQL queries into Gremlin traversals and runs them against your favorite TinkerPop 3 enabled graph database.

SQL Support and Limitations
---------------------------

=== Basic Query Form
The driver current support `SELECT` statements of the general form:
[source]
----
SELECT [ DISTINCT ] { * | <projectItem> [, <projectItem> ]* }
   FROM <tableExpression>
   [ WHERE <booleanExpression> ]
   [ GROUP BY { <column> [, <column> ]* } ]
   [ HAVING <booleanExpression> ]
   [ ORDER BY { <column> [ DESC ] [, <column> [ DESC ] ]* } ]
   [ LIMIT limitNumber ]

projectItem:
    [ agg ]* [ <table>. ]* <column> [ [ AS ] columnAlias ]
----

Queries without a `FROM` clause or only using `VALUES` in the `FROM` clause are not supported.

A `tableExpression` must specify 1 or more tables as a comma separated list or using `JOIN` keywords. See the <<join, Join>> section for more information on supported join operations.

A `projectItem` in `SELECT` can be a reference to a column, or aggregation expression using the supported aggregation functions listed in <<operators, Operators and Functions>>. A `booleanExpression` is the same but must resolve to a `boolean` value.

To order by a value, it must be part of the `SELECT` list. Group by and order by using column aliases is currently not supported.

Type Conversion is not supported, and thus `CAST` is not supported. Set operations `UNION`, `INTERSECT` and `EXCEPT` are not supported. Grouping operations using `CUBE`, `ROLLUP` or `GROUPING SETS` are not supported. Ordering using `NULLS FIRST` and `NULLS LAST` or by referencing column ordinals is not supported.

=== Identifiers
Identifiers are the names of tables, columns, and column aliases in an SQL query.

Quoting is optional but unquoted identifiers must start with a letter and can only contain letters, digits, and underscores. Quoted identifiers start and end with double quotes. They may contain virtually any character. To include a double quote in an identifier, use another double quote to escape it. The maximum identifier length, quoted or unquoted, is 128 characters.

Identifier matching is case-sensitive and identifiers that match a reserved SQL keyword must be quoted or use fully qualified names.

[[join]]
=== Joins
==== Cross Collection Joins
Currently, cross collection joins are not supported.

==== Same Collection Joins
Currently, the driver only support `INNER JOIN` on two vertices that are connected by an edge. So when looking at vertices you will see `<edge_label>_IN_ID` or `<edge_label>_OUT_ID`. Vertices can be joined on columns that have the same edge label and one ends with `IN_ID` while the other ends with an `OUT_ID`.

=== Data Types
The driver recognizes the following SQL data types:

* `BOOLEAN` - Boolean literals must be `TRUE` or `FALSE`
* `TINYINT`
* `SMALLINT`
* `INTEGER` or `INT`
* `BIGINT`
* `DECIMAL`
* `REAL` or `FLOAT`
* `CHAR` and `VARCHAR` - String literal must be enclosed in single-quotes.
* `DATE`

[[operators]]
=== Operators and Functions
Supported operators are listed below. Arithmetic, string, conditional and date operators and functions are currently not support.

==== Comparison Operators
* `value1 <op> value2` where `op` is one of : `=`, `<>`, `<`, `>`, `<=` or `>=`

==== Logical Operators
* `boolean1` OR `boolean2`
* `boolean1` AND `boolean2`
* NOT `boolean2`

==== Aggregate Functions
* `AVG(numeric)`
* `COUNT(*)`
* `MAX(value)`
* `MIN(value)`
* `SUM(numeric)`

Currently, `COUNT( [DISTINCT] numeric)`, `COUNT( [DISTINCT] value)`, and `SUM( [DISTINCT] numeric)` are not supported.

Additional Limitations
----------------------
* Currently JDBC driver supports https://www.tableau.com/about/blog/2014/7/understanding-tableau-data-extracts-part1[Tableau Data Extracts (TDE)] and has limitations which may prevent or significantly limit functionality when using Live Connection in Tableau.

Acknowledgements
----------------
Special thanks goes to the http://tinkerpop.incubator.apache.org/[Apache TinkerPop] and https://calcite.apache.org/[Apache Calcite] teams.  The depth and breadth of both of these projects is truly astounding.  Also, thanks to Daniel Kuppitz. His work on https://github.com/dkuppitz/sparql-gremlin[SPARQL-Gremlin] served as a model and inspiration for SQL-Gremlin.
